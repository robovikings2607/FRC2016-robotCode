CompBot 2016 Control Scheme

Driver Controls
	self-explanatory
	shift button?
	
Operator Controls
	Button A (1) - Roll in
	Button Y (4) - Roll out
	Button B (2) - Toggle claw open/close
	
		Left Bumper (5) - tighten winder (motor spins forward/positive voltage; encoder position increases)
		Right Bumper (6) - loosen winder (motor spins reverse/negative voltage; encoder position decreases)
			- the above two operator controls will change once zero'ing sequence is implemented
			
	Left Trigger (axis 2) - locks the puncher 
	Right Trigger (axis 3) - shoot the puncher 
	
	While pressing the Left stick:
		Button Y (4) - raise the arm 10 degrees
		Button A (1) - lower the arm 10 degrees

TODO:
1) Need to determine start-up procedure for field
	- when powered off arm will fall if below ~45deg (gravity)
	- need external sensor to detect raised position, and assume on power up if that switch doesn't detect the
	arm, that the arm is at it's lowest position
		- can try setting soft limit to that position and see how it works, think we need to reset arm
		motion profiles (i.e. call PuncherArm.resetArm()) if the soft limit fault occurs, and possibly
		clear it, before any other profiels will run
		- check with Omar on expected behavior

2) Add TCP code (or user network tables) for data exchange with vision app

Winder sequencing
- photoeye will provide zero position = fully cocked
- never drive motor forward once photoeye is made
- on power up, if photoeye isn't made:
	- shoot
	- drive forward until photoeye is made
	- set SRX position to 0
- from that point, the automated shoot & re-cock sequence can be used	


Arm Positioning:
	Talon encoder provides count of cim motor revs, forward >0, reverse <0
		encoder is reversed, so must use CANTalon.reverseSensor(true) to keep encoder and motor in phase
		(i.e. postive voltage causes position to increase, negative voltage cause position to decrease)

	Forward (postive) voltage cause gearbox output to spin counter-clockwise when you look at it head on; or in other words
		if you're looking at a side view with the cim to the left and the shaft to the right, forward means shaft spins towards you
	
	Motor is mounted on left of arm and attached via an addition gear, so therefore:
		Forward (positive) voltage will rotate arm towards front of robot 
		Reverse (negative) voltage will rotate arm towards rear of robot	
		
	350 cim revs equates to 360deg of arm travel:  i.e. deg/rev = 360/350
	so, to travel Xdeg, number of revs required is ((350 * Xdeg) / 360)

	given that forward motor travel rotates arm towards front, measure like a protractor:  
		Consider 90deg as straight up, 180 as flat pointing out the front of the robot, and 0 as flat pointing out the rear
		of the robot 	
		Have vision targeting report target angle between 90 and 180;  e.g. subtract triangulated aim angle from 180
		
	To calculate degrees to travel to change aim:
		subtract current angle from target angle, and travel that far in that direction
	
	For example:
		current angle is 90deg, target angle is 110deg (70deg elevation pointing out front of robot)
			travelDegrees = 110 - 90 = 20deg
		current angle is 110, target angle is 70deg (70deg elevation pointing out back of robot)
			travelDegrees = 70 - 110 = -40deg  
	
	can't use soft limits in Talon for protection since position is relative and is reset on each profile
		see about detecting stall to protect against lowering too far (hitting frame / floor)
	
MikeyBear's Dream Control Scheme
	Shoot and Lock Piston and open the claw - Right Trigger
	Left and Right Bumpers - Rollers in and out
	Up and down on D-Pad - move arm up and down
	left stick - cock back the puncher
	button A - calculate and angle of shooter
	
	 	
	